generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  phone     String     @unique
  name      String?
  code      String     @default("0000")
  reviews   Review[]
  orders    Order[]
  shipments Shipment[]
  block     Boolean    @default(false)
  delete    Boolean    @default(false)
  addresses String[]
  pushIds   String[]
}

model Shipment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  count     Int
  delete    Boolean  @default(false)
}

model Admin {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  password   String?
  repassword String?
  block      Boolean  @default(false)
  delete     Boolean  @default(false)
}

model Moderator {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  email        String      @unique
  password     String?
  repassword   String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @unique
  block        Boolean     @default(false)
  delete       Boolean     @default(false)
  weight       Int         @default(autoincrement())
  phone        String?
}

model Restaurant {
  id                  String     @id @default(cuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  name                String     @unique
  logo                String
  image               String?
  description         String?
  average             Float      @default(0)
  addresses           Address[]
  products            Product[]
  stocks              Stock[]
  reviews             Review[]
  orders              Order[]
  moderator           Moderator?
  categories          String[]
  minimumOrderAmount  Decimal    @db.Money
  deliveryCondition   String?
  legalInformation    String?
  payoff              Decimal    @default(0) @db.Money
  publish             Boolean    @default(false)
  delete              Boolean    @default(false)
  paymentId           String?
  productsCategoriers String[]
  city                String?
}

model Address {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  value        String
  phones       String[]
  startWorkAt  DateTime?  @db.Time(0)
  endWorkAt    DateTime?  @db.Time(0)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  publish      Boolean    @default(false)
  delete       Boolean    @default(false)
  geoPoint     Json?
  allTime      Boolean    @default(false)
}

model Product {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  description  String
  categories   String[]
  image        String
  shipments    Shipment[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  publish      Boolean    @default(false)
  delete       Boolean    @default(false)
  price        Decimal    @default(0) @db.Money
}

model Stock {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  endAt        DateTime
  name         String
  description  String
  image        String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  publish      Boolean    @default(false)
  delete       Boolean    @default(false)
}

model Review {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  value        Float
  description  String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  order        Order?     @relation(fields: [orderId], references: [id])
  orderId      String?    @unique
  restaurantId String
  block        Boolean    @default(false)
  delete       Boolean    @default(false)
}

model Order {
  id             String     @id @default(cuid())
  uuid           String     @unique
  pid            String?    @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  shipments      Json[]
  amount         Decimal    @db.Money
  paymentStatus  String     @default("PENDING")
  orderStatus    String     @default("new")
  deliveryMethod String     @default("pickup")
  paymentMethod  String
  name           String
  address        String
  phone          String
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  comment        String?
  review         Review?
}
